# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Complete CI/CD Process
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
env:
    ECR_REPO_NAME: 'akashjenkinsecr'
    AWS_REGION: 'ap-south-1'
    ECR_PUBLIC_REPO_URI: 'public.ecr.aws/i4d6z1a1/akashjenkinsecr'
    IMAGE_TAG: 'Latest_Image'
    AWS_ACCOUNT_ID: '705307574220'
    IMAGE_URI: "${ECR_PUBLIC_REPO_URI}:${IMAGE_TAG}"
jobs:  
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
              aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
              aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
              aws-region: ${{env.AWS_REGION}}

      - name: Build with Maven
        run: |
          echo "Building Java Application"
          mvn clean package
          
      - name: Login to AWS ECR Repository
        run: |
          echo "Logging into AWS ECR Public..."
          aws ecr-public get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin public.ecr.aws

      - name: Push Docker Image ECR
        run: |
          echo "Pushing Docker Image..."
          docker push $IMAGE_URI
          
          
          
          
              
      
    
  

 
